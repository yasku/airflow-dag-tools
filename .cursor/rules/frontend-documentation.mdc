---
description: 
globs: 
---
# **📌 Documentación Técnica y Funcional del Frontend**

## **🔹 Introducción**
Este documento describe en detalle la configuración, estructura y funcionamiento del **frontend** de la aplicación web de validación de DAGs de Airflow.

El frontend está construido con **Vite + React + Tailwind CSS**, y se comunica con el backend mediante **FastAPI**.

---

## **📌 Instalación y Configuración**
### **1️⃣ Requisitos Previos**
- **Node.js** versión 18 o superior.
- **npm** o **yarn** instalado.
- **Backend en ejecución** (`uvicorn main:app --reload`).

### **2️⃣ Instalación del Frontend**
Ejecuta los siguientes comandos:
```bash
cd frontend
npm install  # Instala las dependencias
npm install react-hot-toast @heroicons/react  # Componentes adicionales para notificaciones y iconos
```

### **3️⃣ Iniciar el Frontend**
```bash
npm run dev
```
Esto iniciará el frontend en `http://localhost:5173`.

---

## **📌 Estructura del Proyecto**
```
/frontend
 ├── /src
 │   ├── App.jsx            # Componente principal
 │   ├── main.jsx           # Punto de entrada de React
 │   ├── index.css          # Estilos globales de Tailwind
 │   ├── App.css            # Estilos específicos de la app
 │   ├── /pages             # Páginas principales
 │   │   ├── Home.jsx       # Página de inicio
 │   │   ├── Upload.jsx     # Página para subir DAGs
 │   │   ├── Validate.jsx   # Página de validación
 │   ├── /components        # Componentes reutilizables
 │   │   ├── Navbar.jsx     # Barra de navegación
 ├── package.json          # Dependencias de React
 ├── tailwind.config.js    # Configuración de Tailwind
 ├── postcss.config.cjs    # Configuración de PostCSS
 ├── index.html            # Página principal
 ├── vite.config.js        # Configuración de Vite
```

---

## **📌 Configuración Clave**

### **1️⃣ Tailwind CSS (`tailwind.config.js`)**
```javascript
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
```
📌 **Se escanean todos los archivos en `src/` para aplicar estilos de Tailwind.**

### **2️⃣ PostCSS (`postcss.config.cjs`)**
```javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
```
📌 **Permite que Tailwind funcione con PostCSS.**

### **3️⃣ Estilos Globales (`index.css`)**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  body {
    @apply bg-gray-900 text-gray-100;
  }
}

@layer components {
  .btn-primary {
    @apply px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg 
    transition-all duration-200 transform hover:scale-105 
    focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50;
  }

  .card {
    @apply bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-700
    hover:border-gray-600 transition-all duration-200;
  }

  .input-file {
    @apply block w-full text-sm text-gray-400
    file:mr-4 file:py-2 file:px-4 file:rounded-lg
    file:border-0 file:text-sm file:font-semibold
    file:bg-blue-600 file:text-white
    hover:file:bg-blue-700 cursor-pointer;
  }
}
```

---

## **📌 Explicación de los Archivos**

### **📂 `App.jsx` (Componente Principal)**
**Funcionalidad:**
- Define las rutas principales con `react-router-dom`.
- Incluye el `Navbar` y las páginas de la app.
- Configura el sistema de notificaciones toast
- Implementa tema dark consistente

```javascript
import "./index.css";  // Importa Tailwind CSS
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Home from "./pages/Home";
import Upload from "./pages/Upload";
import Validate from "./pages/Validate";
import Navbar from "./components/Navbar";

function App() {
  return (
    <Router>
      <Navbar />
      <div className="container mx-auto p-4">
        <Routes>
          <Route path="/" element={<Home />} />
          <Route path="/upload" element={<Upload />} />
          <Route path="/validate" element={<Validate />} />
        </Routes>
      </div>
    </Router>
  );
}
export default App;
```

---

### **📂 `Navbar.jsx` (Barra de Navegación)**
**Funcionalidad:**
- Logo y título de la aplicación con icono
- Indicador de página activa con subrayado y color
- Diseño responsive y animaciones
- Tema dark integrado
- Navegación simplificada y moderna

```javascript
import { Link } from "react-router-dom";

function Navbar() {
  return (
    <nav className="bg-gray-900 p-4 text-white">
      <div className="container mx-auto flex justify-between">
        <h1 className="text-xl font-bold">DAG Validator</h1>
        <div>
          <Link className="mx-2 hover:underline" to="/">Inicio</Link>
          <Link className="mx-2 hover:underline" to="/upload">Subir DAG</Link>
          <Link className="mx-2 hover:underline" to="/validate">Validar DAG</Link>
        </div>
      </div>
    </nav>
  );
}
export default Navbar;
```

---

## **📌 Uso del Frontend**
### **1️⃣ Subir un DAG y Validarlo**
Desde la página `Upload.jsx`, se envía un archivo al backend para su validación.

```javascript
const handleUpload = async () => {
  const formData = new FormData();
  formData.append("file", file);
  try {
    const response = await fetch("http://127.0.0.1:8000/validate_dag/", {
      method: "POST",
      body: formData,
    });
    const result = await response.json();
    console.log(result);
  } catch (error) {
    console.error("Error al subir el DAG:", error);
  }
};
```
📌 **El resultado se muestra en `Validate.jsx`.**

---

## **📌 Conclusión**
El frontend proporciona una interfaz moderna y profesional con:

✅ **Interfaz construida con Vite, React y Tailwind CSS**  
✅ **Integración con FastAPI para validar DAGs**  
✅ **Estructura modular y escalable**  
✅ **Diseño dark theme moderno y profesional**
✅ **Feedback visual inmediato con notificaciones toast**
✅ **Componentes interactivos y animados**
✅ **Sistema robusto de manejo de errores**
✅ **Experiencia de usuario mejorada**

📌 **Este documento sirve como referencia para futuras mejoras en la UI y optimización del frontend.** 🚀

## **📌 Componentes Principales**

### **1️⃣ App.jsx**
**Funcionalidad:**
- Define las rutas principales con `react-router-dom`
- Incluye el `Navbar` y las páginas de la app
- Configura el sistema de notificaciones toast
- Implementa tema dark consistente

### **2️⃣ Navbar.jsx**
**Nueva Implementación:**
- Logo y título de la aplicación con icono
- Indicador de página activa con subrayado y color
- Diseño responsive y animaciones
- Tema dark integrado
- Navegación simplificada y moderna

### **3️⃣ Home.jsx**
**Nueva Implementación:**
- Diseño moderno con cards informativas
- Iconos ilustrativos
- Llamada a la acción clara
- Grid responsive
- Animaciones suaves

### **4️⃣ Upload.jsx**
**Nueva Implementación:**
- Selector de archivo estilizado
- Botón de validación con estados de carga
- Indicador de progreso animado
- Sistema de notificaciones toast
- Manejo de errores mejorado

---

## **📌 Sistema de Notificaciones**
Implementado con `react-hot-toast`:
```javascript
<Toaster 
  position="bottom-right"
  toastOptions={{
    style: {
      background: '#1F2937',
      color: '#fff',
    },
    success: {
      iconTheme: {
        primary: '#10B981',
        secondary: '#fff',
      },
    },
    error: {
      iconTheme: {
        primary: '#EF4444',
        secondary: '#fff',
      },
    },
  }}
/>
```

---

## **📌 Manejo de Errores**
Sistema robusto de visualización de errores:
```javascript
// Tipos de errores manejados
{
  // Error de sintaxis
  error: {
    type: "SyntaxError",
    line: 5,
    message: "invalid syntax"
  }

  // Error de Airflow
  error: {
    type: "Airflow DAG ImportError",
    details: [...]
  }

  // Error simple
  error: "Error al comunicarse con el servidor"
}
```


